/// <reference lib="webworker" />
/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';
import { syncFirestoreWithIndexedDB } from './helpers/synchDBHelper';

declare const self: ServiceWorkerGlobalScope;

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing.
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  ({ request, url }: { request: Request; url: URL }) => {
    if (request.mode !== 'navigate') {
      return false;
    }

    if (url.pathname.startsWith('/_')) {
      return false;
    }

    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    }

    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

registerRoute(
  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'),
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// background synchronization
self.addEventListener('sync', (event: any) => {
  console.log("background synchronization")
  if (event.tag === 'sync-recipes') {
    event.waitUntil(syncFirestoreWithIndexedDB());
  }
});

// sync check and initial sync
self.addEventListener('activate', (event) => {
  
  console.log("inital synchronization")
  event.waitUntil(
    self.clients.claim().then(() => {
      
  console.log("check synchronization")
      if ('sync' in self.registration) {
        (self.registration as any).sync.register('sync-recipes').catch((error: any) => {
          console.error('Sync registration failed:', error);
          
          console.log("syncFirestoreWithIndexedDB synchronization")
          syncFirestoreWithIndexedDB(); // Fallback
        });
      } else {
        console.log("syncFirestoreWithIndexedDB synchronization")
        syncFirestoreWithIndexedDB(); // Fallback in case sync isn't supported
      }
    })
  );
});
